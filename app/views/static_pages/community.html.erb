<% provide(:title, "Community") %>
<%= stylesheet_link_tag 'pages/community', media: 'all', 'data-turbolinks-track': 'reload' %>
<a data-anchor-id="feature">
	<div class="banner-sm" style="background-image: url(<%= asset_path('backgrounds/home.jpg') %>)">
		<div class="row d-flex align-items-center">
			<div class="message text-center col-sm-7">
				<p class="light-text title serif clear-theme">Community</p>
			</div>
		</div>
	</div>
</a>

<a data-anchor-id="courses">
	<div class="banner-sm">
        <div class="row">
          <div class="col-lg-1 col-sm-0"></div>

          <div class="message col-lg-10 col-sm-12">
            <div id="course-app" style="min-height: 300px">
              <transition name="fade-in-out">

                <control-list 
                  v-if="viewing_mode === 'index' || viewing_mode === 'published' || viewing_mode === 'review' || viewing_mode === 'drafts'">
                  <button class="button orange-button" 
                    slot="controls"
                    v-on:click="new_item()">
                    New Course
                  </button>

                  <course-render-small
                    slot="preview"
                    v-for="item in model" 
                    v-bind:key="item.id"
                    v-bind:schema="schema" 
                    v-bind:item="item">

                    <button
                      slot="controls"
                      v-on:click="show_item(item.id)"
                      class="button blue-button" >
                      View
                    </button>

                  </course-render-small>

                </control-list>

                <control-view 
                  v-if="viewing_mode === 'show'">

                  <course-render-large
                    slot="view"
                    v-bind:schema="schema"
                    v-bind:item="model">
                  </course-render-large>

                  <div slot="controls">
                    <button
                      class="button blue-button"
                      v-on:click="published()">
                      Back
                    </button>
                    <button
                      class="button blue-button"
                      v-on:click="copylink(model.id)">
                      Share
                    </button>
                    <button class="button orange-button"
                      v-on:click="edit_item(model.id)">
                      Edit
                    </button>
                  </div>
                </control-view>

                <control-form 
                  v-if="viewing_mode === 'new' || viewing_mode === 'edit'" 
                  v-bind:schema="schema" 
                  v-bind:item="model" 
                  v-bind:mode="viewing_mode"
                  v-on:changed="changed">

                  <course-render-large
                    slot="preview"
                    v-bind:schema="schema"
                    v-bind:item="model">
                  </course-render-large>
                  
                  <div slot="controls">
                    <span v-if="viewing_mode === 'new'">
                      <button class="button blue-button" 
                        v-on:click="published()">
                        Cancel
                      </button>
                      <button class="button orange-button" 
                        v-on:click="create_item(model)">
                        Create
                      </button>
                    </span>

                    <span v-if="viewing_mode === 'edit'">
                      <button class="button blue-button" 
                        v-on:click="show_item(model.id)">
                        Cancel
                      </button>
                      <button class="button orange-button"
                        v-on:click="update_item(model.id, model)">
                        Save
                      </button>
                      <button class="button orange-button"
                        v-on:click="delete_item(model.id)">
                        Delete
                      </button>
                    </span>
                  </div>
                </control-form>

                <div class="loading text-center"
                  v-if="viewing_mode === 'load'">
                  <%= fa_icon "spinner", class: "fa-spin fa-lg" %>
                </div>

              </transition>
            </div>
          </div>

          <div class="col-lg-1 col-sm-0"></div>
        </div>
      </div>
    </div>
	</div>
</a>
<script>
  let preload_data = {
    subpath: "<%= @subpath.to_s %>"

  }
</script>
<%= javascript_include_tag 'models/course.js', 'data-turbolinks-track': 'reload' %>
<%= javascript_include_tag 'views/course.js', 'data-turbolinks-track': 'reload' %>

<script>

/*------------------------------------
------------ START REFACTOR ------------
------------------------------------*/

function copy_to_clipboard(string) {
  const hidden_element = document.createElement('textarea')
  hidden_element.value = string
  hidden_element.setAttribute('readonly', '')
  hidden_element.style.position = 'absolute'
  hidden_element.style.left = '-9999px'
  document.body.appendChild(hidden_element)
  hidden_element.select()
  document.execCommand('copy')
  document.body.removeChild(hidden_element)
}

function wait(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

const StringRender = Vue.component("string-render", {
  props: ["string", "placeholder"],
  template: `
            <span class="string-render">
              <span v-if="string.match(/^\s*$/) === null">
                {{ string }}
              </span>
              <span v-else-if="placeholder !== undefined" class="string-render-placeholder" style="opacity: 0.5">
                {{ placeholder }}
              </span>
              <span v-else class="string-render-placeholder" style="opacity: 0.5">
                blank
              </span>
            </span>
            `
})

const PropertyInput = Vue.component("property-input", {
  props: ["label", "placeholder", "type"],
  data() {
    return {
      value: undefined
    }
  },
  methods: {
    changed(event, mod) {
      let new_value = event.target.value
      if (mod === "number") {
        new_value = Number(new_value)
      } else if (mod === "trim") {
        new_value = new_value.trim()
      }
      this.value = new_value
      this.$emit("changed", this.label, this.value)
    }
  },
  created() {
    this.value = this.placeholder
  },
  template: `
            <div class="form-group property-input">
              <label 
                v-bind:for="label">
                {{ label }}
              </label>
              <input 
                v-if="type === 'text'" 
                v-bind:placeholder="label"
                v-bind:value="value"
                v-on:input="changed($event, 'trim')" 
                type="text" 
                class="form-control">
              <textarea 
                v-if="type === 'textarea'" 
                v-bind:placeholder="label"
                v-bind:value="value"
                v-on:input="changed($event, 'trim')" 
                type="textarea" 
                class="form-control">
              </textarea>
              <input 
                v-if="type === 'number'" 
                v-bind:placeholder="label"
                v-bind:value="value"
                v-on:input="changed($event, 'number')" 
                type="number" 
                class="form-control">
              <select 
                v-if="type.constructor === Object" 
                v-on:change="changed($event, 'number')" 
                type="enumerable" 
                class="form-control">
                <option 
                  v-for="(num, name) in type" 
                  v-if="num === placeholder" 
                  v-bind:value="num" 
                  selected>
                  {{ name }}
                </option>
                <option 
                  v-for="(num, name) in type" 
                  v-if="num !== placeholder" 
                  v-bind:value="num">
                  {{ name }}
                </option>
              </select>
            </div>
            `
})
const ModelForm = Vue.component("model-form", {
  props: ["item", "schema"],
  data() {
    return {
      model: {}
    }
  },
  methods: {
    changed(key, value) {
      Vue.set(this.model, key, value)
      this.$emit("changed", this.model)
    }
  },
  created() {
    Vue.set(this, "model", JSON.parse(JSON.stringify(this.item)))
    // for (key in this.item) {
    //   Vue.set(this.model, key, this.item[key])
    // }
  },
  template: `
            <form class="model-form">
              <property-input v-for="(type, label) in schema" 
                v-bind:key="label"
                v-bind:label="label" 
                v-bind:placeholder="item[label]" 
                v-bind:type="type"
                v-on:changed="changed">
              </property-input>
            </form>
            `
})

const ControlForm = Vue.component("control-form", {
  props: ["schema", "item", "mode"],
  data() { 
    return {
      model: {}
    }
  },
  methods: {
    changed(new_model) {
      Vue.set(this, "model", new_model)
      this.$emit("changed", this.model)
    }
  },
  created() {
    Vue.set(this, "model", JSON.parse(JSON.stringify(this.item)))
    // for (key in this.item) {
    //   Vue.set(this.model, key, this.item[key])
    // }
  },
  template: `
            <div class="control-form row">
              <div class="preview col-lg-6 col-sm-12">
                <slot name="preview"></slot>
              </div>

              <div class="form col-lg-6 col-sm-12">
              
                <model-form
                  v-bind:item="item"
                  v-bind:schema="schema"
                  v-on:changed="changed">
                </model-form>

                <slot name="controls"></slot>

              </div>
            </div>
            `
})

const ControlList = Vue.component("control-list", {
  template: `
            <div class="control-list">
              <slot name="controls"></slot>
              <br> 
              <div class="row">
                <slot name="preview"></slot>
              </div>
            </div>
            `
})

const ControlView = Vue.component("control-view", {
  template: `
            <div class="control-view">
              <slot name="view"></slot>
              <slot name="controls"></slot>
            </div>
            `
})

/*------------------------------------
------------ END REFACTOR ------------
------------------------------------*/


/*--------------------------------------------
------------ Course Custom Render ------------
---------------------------------------------*/


const CourseRenderLarge = Vue.component("course-render-large", {
  props: ["schema", "item"],
  template: `
            <div class="course-render-large">
              <p class="title">
                <string-render 
                  v-bind:string="item.title"
                  v-bind:placeholder="'Blank Title'"
                  >
                </string-render>
              </p>
              <p class="text">
                <string-render
                  v-bind:string="item.description"
                  v-bind:placeholder="'Blank Description'"
                  >
                </string-render>
              </p>
            </div>
            `
})

const CourseRenderSmall = Vue.component("course-render-small", {
  props: ["schema", "item"],
  template: `
            <div class="course-render-small col-lg-4 col-md-6 col-sm-12">
              <p class="title">
                <string-render 
                  v-bind:string="item.title"
                  v-bind:placeholder="'Blank Title'"
                  >
                </string-render>
              </p>
              <slot name="controls"></slot>
            </div>
            `
})


/*--------------------------------------------
------------ Course Application ------------
---------------------------------------------*/

const CourseApp = new Vue({
  el: "#course-app",
  data: {
    path: preload_data.subpath,
    schema: undefined,
    model: undefined,
    viewing_mode: undefined,
    permissions: undefined
  },
  methods: {
    transition(api_promise, success_viewing_mode) {
      const last_state = this.viewing_mode
      this.viewing_mode = "blank"
      const load = setTimeout(() => { this.viewing_mode = "load" }, 200)
      return api_promise
        .then(this.success)
        .catch(this.error)
        .then(() => {
          clearTimeout(load)
          this.viewing_mode = "blank"
          return wait(200)
        }).catch((error) => {
          clearTimeout(load)
          this.viewing_mode = last_state
          throw error     
        })
        .then(() => { this.viewing_mode =  success_viewing_mode })
    },
    success(response) {
      if (response.result !== undefined) {
        if(response.result.constructor === Array || response.result.constructor === Object) {
          this.model = response.result
        } else if (response.result.constructor === String) {
          Notifications.notify(response.result)
        }
      }
      if (response.schema !== undefined && response.schema.constructor === Object) {
        this.schema = response.schema
      }
    },
    error(response) {
      Notifications.error(response.result)
      throw(new Error(JSON.stringify(response)))
    },
    paramsJSON(params) {
      return JSON.parse(JSON.stringify(params))
    },

    changed(new_model) {
      this.model = new_model
    },
    copylink(id) {
      copy_to_clipboard(window.location.host + "/community/" + id)
      Notifications.notify("The course link has been copied to your clipboard")
    },

    index_items() { return this.transition(CourseModel.index(), "index") },
    drafts() { return this.transition(CourseModel.drafts(), "drafts") },
    review() { return this.transition(CourseModel.review(), "review") },
    published() { return this.transition(CourseModel.published(), "published") },
    show_item(id) { return this.transition(CourseModel.show(id), "show") },
    new_item() { return this.transition(CourseModel.new(), "new") },
    edit_item(id) { return this.transition(CourseModel.edit(id), "edit") },
    create_item(params) { return this.transition(CourseModel.create(this.paramsJSON(params)), "blank").then(() => { this.published() }) },
    update_item(id, params) { return this.transition(CourseModel.update(id, this.paramsJSON(params)), "blank").then(() => { this.published() }) },
    delete_item(id) { return this.transition(CourseModel.delete(id), "blank").then(() => { this.published() }) },
  },
  created() {
    if (this.path.match(/^\d+$/) !== null) {
      let id = this.path.match(/^\d+$/)[0]
      this.show(id)
    } else {
      this.published()
    }
  }
})
</script>